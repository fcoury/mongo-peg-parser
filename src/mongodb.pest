WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

query = { expression }

expression = { begin_object ~ clause_list ~ end_object }

clause_list = { clause ~ (value_separator ~ clause)* }

clause = { leaf_clause | expression_tree_clause | expression_clause | text_clause }

text_clause = { quotation_mark ~ text_operator ~ quotation_mark ~ name_separator ~ text_options }

text_options = {
  begin_object ~ quotation_mark ~ search_operator ~ quotation_mark ~ name_separator ~ string ~
  (value_separator ~ text_options_optional)? ~ end_object
}

text_options_value = { string | true | false }

text_options_optional = {
  (quotation_mark ~ text_optional_operator ~ quotation_mark ~ name_separator ~ text_options_value)*
}

expression_tree_clause = {
  quotation_mark ~ expression_tree_operator ~ quotation_mark ~ name_separator ~ expression_list ~ end_array
}

expression_tree_operator = { "$or" | "$nor" | "$and" }

expression_clause = {
  quotation_mark ~ expression_operator ~ quotation_mark ~ name_separator ~ begin_object ~ operator ~ end_object
}

expression_operator = { "$expr" }

expression_list = { ( expression ~ (value_separator ~ expression)* )? }

where_clause = { quotation_mark ~ where_operator ~ quotation_mark ~ name_separator ~ string }

leaf_clause = { key ~ name_separator ~ value }

value = operator_expression | json

// --- Operators ---

value_operator = {
  "$gte" |
    "$gt" |
    "$lte" |
    "$lt" |
    "$eq" |
    "$ne" |
    "$type" |
    "$size" |
    "$exists" |
    "$bitsAllClear" |
    "$bitsAllSet" |
    "$bitsAnyClear" |
    "$bitsAnySet"
}

list_operator = { "$in" | "$nin" | "$all" | "$mod" }

operator_expression_operator = { "$not" | "$elemMatch" }

operator_expression = { begin_object ~ operator_list ~ end_object }

operator_list = { operator ~ (value_separator ~ operator)* }

operator = {
  // value-operator
  ( quotation_mark ~ value_operator ~ quotation_mark ~ name_separator ~ json )
  // list-operator
  | ( quotation_mark ~ list_operator ~ quotation_mark ~ name_separator ~ begin_array ~ leaf_value_list ~ end_array )
  // elemmatch-expression-operator
  | ( quotation_mark ~ "$elemMatch" ~ quotation_mark ~ name_separator ~ expression )
  // operator-expression-operator
  | ( quotation_mark ~ operator_expression_operator ~ quotation_mark ~ name_separator ~ operator_expression )
  // special case for $not accepting $regex
  | ( quotation_mark ~ "$not" ~ quotation_mark ~ name_separator ~ ejson_regex )
  // geo-within-operator
  | ( quotation_mark ~ "$geoWithin" ~ quotation_mark ~ name_separator ~ shape )
  // geo-intersects-operator
  | ( quotation_mark ~ "$geoIntersects" ~ quotation_mark ~ name_separator ~ geometry )
  // near-operator
  | ( quotation_mark ~ ("$nearSphere" | "$near") ~ quotation_mark ~ name_separator ~ (geometry_point | legacy_coordinates) )
  // min-distance-operator
  | ( quotation_mark ~ distance_operator ~ quotation_mark ~ name_separator ~ number_positive )
}

// -- Geo Operators --

distance_operator = { "$minDistance" | "$maxDistance" }

shape = { geometry | legacy_shape }

geometry = {
  begin_object ~
    quotation_mark ~ "$geometry" ~ quotation_mark ~ name_separator ~
    begin_object ~
      (
        quotation_mark ~ "type" ~ quotation_mark ~
        name_separator ~ quotation_mark ~ geometry_type ~ quotation_mark
      ) ~
      (
        value_separator ~ quotation_mark ~ "coordinates" ~ quotation_mark ~
        name_separator ~ geometry_coordinates
      ) ~
    end_object ~
  end_object
}

geometry_point = {
  begin_object ~
    quotation_mark ~ "$geometry" ~ quotation_mark ~ name_separator ~
    begin_object ~
      (
        quotation_mark ~ "type" ~ quotation_mark ~
        name_separator ~ quotation_mark ~ "Point" ~ quotation_mark
      ) ~
      (
        value_separator ~ quotation_mark ~ "coordinates" ~ quotation_mark ~
        name_separator ~ legacy_coordinates
      ) ~
    end_object ~
    (
      value_separator ~ quotation_mark ~ distance_operator ~ quotation_mark ~
      name_separator ~ number_positive
    )* ~
  end_object
}

geometry_type = { "Polygon" | "MultiPolygon" }

geometry_coordinates = {
  begin_array ~
    ( number | geometry_coordinates ) ~ (value_separator ~ (number | geometry_coordinates))* ~
  end_array
}

legacy_coordinates = {
  begin_array ~
    number_longitude ~ value_separator ~
    number_latitude
  end_array
}

legacy_shape = {
  begin_array ~
    number_longitude ~ value_separator ~ number_latitude ~
  end_array
}

center_shape = {
  begin_object ~
    quotation_mark ~ ("$centerSphere" | "$center") ~ quotation_mark ~ name_separator ~
// TODO - How to translate the $ modifier to pest?
//     $(
       begin_array ~
         begin_array ~
           number ~ value_separator ~ number ~
         end_array ~
         value_separator ~
         number ~
       end_array
//     )
}

box_shape = {
  begin_object ~
    quotation_mark ~ "$box" ~ quotation_mark ~ name_separator ~
// TODO - How to translate the $ modifier to pest?
//     $(
    begin_array ~
      begin_array ~
        number_longitude ~ value_separator ~ number_latitude ~
      end_array ~
      value_separator ~
      begin_array ~
        number_longitude ~ value_separator ~ number_latitude ~
      end_array ~
    end_array ~
//     )
  end_object
}

polygon_shape = {
  begin_object ~
    quotation_mark ~ "$polygon" ~ quotation_mark ~ name_separator ~
// TODO - How to translate the $ modifier to pest?
//     $(
    begin_array ~
      (begin_array ~
        number ~ value_separator ~ number ~
      end_array) ~
      (value_separator ~
      begin_array ~
        number ~ value_separator ~ number ~
      end_array)* ~
    end_array ~
//     )
  end_object
}

where_operator = { "$where" }

text_operator = { "$text" }

search_operator = { "$search" }

text_optional_operator = { "$language" | "$caseSensitive" | "$diacriticSensitive" }

case_sensitive_operator = { "$caseSensitive" }

diacritic_sensitive_operator = { "$diacriticSensitive" }

leaf_value_list = {
  ( json ~ ( value_separator ~ json )* )?
}

// field name limitations: https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names
// no "." no null character and does not start with "$"
// assuming at least 1 character
key = {
  quotation_mark ~ ([^$] [^\x00"]*) ~ quotation_mark
}

//
// JSON Grammar
// ============
//
// Based on the grammar from RFC 7159 [1].
//
// Note that JSON is also specified in ECMA-262 [2], ECMA-404 [3], and on the
// JSON website [4] (somewhat informally). The RFC seems the most authoritative
// source, which is confirmed e.g. by [5].
//
// [1] http://tools.ietf.org/html/rfc7159
// [2] http://www.ecma-international.org/publications/standards/Ecma-262.htm
// [3] http://www.ecma-international.org/publications/standards/Ecma-404.htm
// [4] http://json.org/
// [5] https://www.tbray.org/ongoing/When/201x/2014/03/05/RFC7159-JSON
//

// ----- 2. JSON Grammar -----

json = _{
  leaf_value
}

begin_array     = _{ "[" }
begin_object    = _{ "{" }
end_array       = _{ "]" }
end_object      = _{ "}" }
name_separator  = _{ ":" }
value_separator = _{ "," }

// ----- 3. Values -----

leaf_value = {
  false
  | null
  | true
  | object
  | array
  | number
  | string
  | extended_json_value
}

false = { "false" }
null  = { "null"  }
true  = { "true"  }

extended_json_value = {
  = ejson_regex
  | ejson_objectid
  | ejson_minkey
  | ejson_maxkey
  | ejson_long
  | ejson_decimal
  | ejson_date
  | ejson_timestamp
  | ejson_binary
  | ejson_dbref
  | ejson_undefined
}

ejson_objectid = {
  begin_object ~
    quotation_mark ~ "$oid" ~ quotation_mark ~
    name_separator ~ quotation_mark ~ hexdig24 ~ quotation_mark ~
  end_object
}

hexdig24 = {
  ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~
  ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~
  ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~
  ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~
  ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~
  ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT
}

ejson_minkey = {
  begin_object ~
    quotation_mark ~ "$minKey" ~ quotation_mark ~
    name_separator ~ ("1" | "true") ~
  end_object
}

ejson_maxkey = {
  begin_object ~
    quotation_mark ~ "$maxKey" ~ quotation_mark ~
    name_separator ~ ("1" | "true") ~
  end_object
}

ejson_long = {
  begin_object ~
    quotation_mark ~ "$numberLong" ~ quotation_mark ~
    name_separator ~ quotation_mark ~ ((plus | minus | ASCII_DIGIT)+) ~ quotation_mark ~
  end_object
}

ejson_decimal = {
  begin_object ~
    quotation_mark ~ "$numberDecimal" ~ quotation_mark ~
    name_separator ~ quotation_mark ~ (quotation_mark ~ number ~ quotation_mark) ~
  end_object
}

ejson_date = {
  begin_object ~
    quotation_mark ~ "$date" ~ quotation_mark ~ name_separator ~
    (ejson_iso8601_date | ejson_numberlong_date)
  end_object
}

ejson_iso8601_date = {
  quotation_mark ~ (iso_date_time) ~ quotation_mark
  // TODO $(iso_date_time)
}

ejson_numberlong_date = {
  ejson_long
}

ejson_undefined = {
  begin_object ~
    quotation_mark ~ "$undefined" ~ quotation_mark ~
    name_separator ~ "true" ~
  end_object
}

ejson_dbref = {
  begin_object ~
    ( // members
      ( // ref
        quotation_mark ~ "$ref" ~ quotation_mark ~
        name_separator ~ string
      ) ~
      ( // id
        value_separator ~ quotation_mark ~ "$id" ~ quotation_mark ~
        name_separator ~ leaf_value
      ) ~
      ( // db
        value_separator ~ quotation_mark ~ "$db" ~ quotation_mark ~
        name_separator ~ string
      )?
    )
  end_object
}

ejson_regex = {
  begin_object ~
    ( // members
      ( // regex
        quotation_mark ~ "$regex" ~ quotation_mark ~
        name_separator ~ string
      ) ~
      ( // options
        value_separator ~ quotation_mark ~ "$options" ~ quotation_mark ~
        name_separator ~ quotation_mark ~ [gims]* ~ quotation_mark
      )?
    )
  end_object
}

ejson_binary = {
  begin_object ~
    ( // members
      ( // binary
        quotation_mark ~ "$binary" ~ quotation_mark ~
        name_separator ~ string
      ) ~
      ( // type
        value_separator ~ quotation_mark ~ "$type" ~ quotation_mark ~
        name_separator ~ quotation_mark ~ ASCII_HEX_DIGIT ~ quotation_mark
      )
    )
  end_object
}

ejson_timestamp = {
  begin_object ~
      quotation_mark ~ "$timestamp" ~ quotation_mark ~ name_separator ~
      ( // object
        begin_object ~
          quotation_mark ~ "t" ~ quotation_mark ~ name_separator ~ number ~ value_separator ~
          quotation_mark ~ "i" ~ quotation_mark ~ name_separator ~ number ~
        end_object
      )
  end_object
}

// ----- 4. Objects -----

object = {
  begin_object ~
    ( // members
      member ~ ( value_separator ~ member )*
    )? ~
  end_object
}

member = {
  key ~ name_separator ~ leaf_value
}

// ----- 5. Arrays -----

array = {
  begin_array ~
    ( // values
      leaf_value ~ ( value_separator ~ leaf_value )*
    )? ~
  end_array
}

array_number = {
  begin_array ~
    ( // values
      number ~ ( value_separator ~ number )*
    )? ~
  end_array
}

// ----- 6. Numbers -----

number = {
  minus? ~ int ~ frac? ~ exp?
}

number_positive = {
  int ~ frac? ~ exp?
}

// A numeric value that represents a longitude coordinate (to any precision between -180.0 and 180.0, inclusive)
// Converted to PEG syntax from this regex: ^-?(180(\.0)?|(1[0-7]\d|[1-9]?\d)(\.(0|\d*[1-9]))?)$
// Taking into account PEG's greedy behaviour and lack of backtracking.
number_longitude = {
  minus? ~ (
    "180" ~ (decimal_point zero)?
    | (
      (( "1" ~ [0-7] ~ ASCII_DIGIT | digit1_9 ~ ASCII_DIGIT | ASCII_DIGIT ) ~ decimal_point ~ int* )
      | (( "1" ~ [0-7] ~ ASCII_DIGIT | digit1_9 ~ ASCII_DIGIT | ASCII_DIGIT ))
    )
  )
}

// A numeric value that represents a latitude coordinate (to any precision between -90.0 and 90.0, inclusive)
// Converted to PEG syntax from regex: ^-?(90(\.0)?|([1-8]?\d)(\.(0|\d*[1-9]))?)$
// Taking into account PEG's greedy behaviour and lack of backtracking.
number_latitude = {
  minus? ~ (
    "90" ~ (decimal_point zero)?
    | (
      (( digit1_9 ~ ASCII_DIGIT | ASCII_DIGIT ) ~ decimal_point ~ int* )
      | (( digit1_9 ~ ASCII_DIGIT | ASCII_DIGIT ))
    )
  )
}


decimal_point = { "." }
digit1_9      = { [1-9] }
e             = { [eE] }
exp           = { e ~ (minus / plus)? ~ ASCII_DIGIT+ }
frac          = { decimal_point ~ ASCII_DIGIT+ }
int           = { zero | (digit1_9 ~ ASCII_DIGIT*) }
minus         = { "-" }
plus          = { "+" }
zero          = { "0" }

// ----- 7. Strings -----

string = {
  quotation_mark ~ char* ~ quotation_mark
}

char = {
  unescaped
  | escape ~
    ( // sequence
        "\""
      | "\\"
      | "/"
      | "b"
      | "f"
      | "n"
      | "r"
      | "t"
      // TODO $(...) below
      | "u" ~ (ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT)
    )
}

escape         = { "\\" }
quotation_mark = { "\"" }
unescaped      = { [^\0-\x1F\x22\x5C] }

// ----- Core ABNF Rules -----

//* See RFC 4234, Appendix B (http://tools.ietf.org/html/rfc4627). *//
// TODO Confirm tha the constants already defined by pest.rs work for our case
// DIGIT  = [0-9]
// HEXDIG = [0-9a-f]i

//
// Data elements and interchange formats – Information interchange – Representation of dates and times
//
// https://en.wikipedia.org/wiki/ISO_8601
// http://tools.ietf.org/html/rfc3339
//
// @append ietf/rfc5234-core-abnf.pegjs
//

// http://tools.ietf.org/html/rfc3339#appendix-A ISO 8601 Collected ABNF
//* Date *//
date_century = {
  // 00-99
  // TODO use $()
  (ASCII_DIGIT ~ ASCII_DIGIT)
}

date_decate = {
  ASCII_DIGIT
}

date_subdecade = {
  ASCII_DIGIT
}

date_year = {
  date_decade ~ date_subdecade
}

date_fullyear = {
  date_century ~ date_year
}

date_month = {
  // 01-12
  // TODO use $()
  (ASCII_DIGIT ~ ASCII_DIGIT)
}

date_wday = {
  // 1-7
  // 1 is Monday, 7 is Sunday
  DIGIT
}

date_mday = {
  // 01-28, 01-29, 01-30, 01-31 based on
  // month/year
  // TODO use $()
  (ASCII_DIGIT ~ ASCII_DIGIT)
}

date_yday = {
  // 001-365, 001-366 based on year
  // TODO use $()
  (ASCII_DIGIT ~ ASCII_DIGIT ~ ASCII_DIGIT)
}

date_week = {
  // 01-52, 01-53 based on year
  // TODO use $()
  (ASCII_DIGIT ~ ASCII_DIGIT)
}

datepart_fullyear = {
  date_century? ~ date_year ~ "-"?
}

datepart_ptyear = {
  "-" ~ (date_subdecade ~ "-"?)?
}

datepart_wkyear = {
  datepart_ptyear | datepart_fullyear
}

dateopt_century = {
  "-" | date_century
}

dateopt_fullyear {
  "-" | datepart_fullyear
}

dateopt_year = {
  "-" | date_year ~ "-"?
}

dateopt_month = {
  "-" | date_month ~ "-"?
}

dateopt_week = {
  "-" | date_week ~ "-"?
}

datespec_full = {
  datepart_fullyear ~ date_month ~ "-"? ~ date_mday
}

datespec_year = {
  date_century | dateopt_century ~ date_year
}

datespec_month = {
  "-" ~ dateopt_year ~ date_month ~ ("-"? ~ date_mday)
}

datespec_year = {
  date_century | dateopt_century ~ date_year
}

datespec_month = {
  "-" ~ dateopt_year ~ date_month ~ ("-"? ~ date_mday)
}

datespec_mday = {
  "--" ~ dateopt_month ~ date_mday
}

datespec_wday = {
  "---" ~ date_wday
}

datespec_yday = {
  dateopt_fullyear ~ date_yday
}

 date = {
     datespec_full
   | datespec_year
   | datespec_month
   | datespec_mday
   | datespec_week
   | datespec_wday
   | datespec_yday
}

//* Time *//
time_hour = {
  // 00-24
  // TODO use $()
  (ASCII_DIGIT ~ ASCII_DIGIT)
}

time_minute = {
  // 00-59
  // TODO use $()
  (ASCII_DIGIT ~ ASCII_DIGIT)
}

time_second = {
   // 00-58, 00-59, 00-60 based on
   // leap-second rules
  // TODO use $()
  (ASCII_DIGIT ~ ASCII_DIGIT)
}

time_fraction = {
  // TODO $(ASCII_DIGIT)+
  ("," | ".") ~ (ASCII_DIGIT)+
}

time_numoffset = {
  ("+" | "-") ~ time_hour ~ (":"? ~ time_minute)?
}

time_zone = {
  "Z" | time_numoffset
}

timeopt_hour = {
  "-" | time_hour ~ ":"?
}

timeopt_minute = {
  "-" | time_minute ~ ":"?
}

timespec_hour = {
  time_hour ~ (":"? ~ time_minute ~ (":"? ~ time_second)?)?
}

timespec_minute = {
  timeopt_hour ~ time_minute ~ (":"? ~ time_second)?
}

timespec_second = {
  "-" ~ timeopt_minute ~ time_second
}

timespec_base = {
  timespec_hour | timespec_minute | timespec_second
}

time = {
  timespec_base ~ time_fraction? ~ time_zone?
}

iso_date_time = {
  date ~ "T" ~ time
}

//* Durations *//
dur_second = {
  ASCII_DIGIT+ ~ "S"
}

dur_minute = {
  ASCII_DIGIT+ ~ "M" ~ dur_second?
}

dur_hour = {
  ASCII_DIGIT+ ~ "H" ~ dur_minute?
}

dur_time = {
  "T" ~ (dur_hour | dur_minute | dur_second)
}

dur_day = {
  ASCII_DIGIT+ ~ "D"
}

dur_week = {
  ASCII_DIGIT+ ~ "W"
}

dur_month = {
  ASCII_DIGIT+ ~ "M" ~ dur_day?
}

dur_year = {
  ASCII_DIGIT+ ~ "Y" ~ dur_month?
}

dur_date = {
  (dur_year | dur_month | dur_day) ~ dur_time?
}

duration = {
  "P" ~ (dur_date | dur_time | dur_week)
}

//* Periods *//
period_explicit = {
  iso_date_time ~ "/" ~ iso_date_time
}

period_start = {
  iso_date_time ~ "/" ~ duration
}

period_end = {
  duration ~ "/" ~ iso_date_time
}

period = {
  period_explicit | period_start | period_end
}
